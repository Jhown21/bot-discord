// utils/translatePerformance.js
// ‚ú≥Ô∏è Traduz mensagens de performance do Minecraft para portugu√™s
//     Compat√≠vel com Vanilla, Forge e NeoForge (Spark, AllTheLeaks, TickProfiler, etc.)
//     Inclui sistema de debounce ‚Üí evita flood de mensagens duplicadas em pouco tempo.

const lastMessages = new Map(); // cache { msg: timestamp }

function shouldSend(msg, cooldownMs = 10_000) {
  if (!msg) return false;
  const now = Date.now();
  const last = lastMessages.get(msg) || 0;

  if (now - last < cooldownMs) {
    // ainda dentro do intervalo ‚Üí ignora
    return false;
  }

  // atualiza timestamp
  lastMessages.set(msg, now);
  return true;
}

function translatePerformance(line) {
  let tipo = "default";
  let msg = null;

  const lower = line.toLowerCase();

  // ======================
  // ‚ö†Ô∏è LAG VANILLA
  // ======================
  if (line.includes("Can't keep up!")) {
    tipo = "lag";
    msg = "‚ö†Ô∏è **O servidor n√£o est√° conseguindo acompanhar os ticks (lag detectado).**";
  }

  else if (line.includes("Running") && line.includes("ticks behind")) {
    tipo = "tps";
    msg = "‚è±Ô∏è **O servidor est√° atrasado nos ticks! TPS baixo detectado.**";
  }

  // ======================
  // üîç AllTheLeaks (NeoForge/ATM10)
  // ======================
  else if (lower.includes("alltheleaks") && lower.includes("memory leaks detected")) {
    tipo = "memory";
    msg = "üîç **AllTheLeaks detectou poss√≠veis vazamentos de mem√≥ria.**";
  }

  // ======================
  // üßπ Garbage Collector
  // ======================
  else if (lower.includes("explicit gc") || lower.includes("explicit gc disabled")) {
    tipo = "memory";
    msg = "üßπ **Execu√ß√£o expl√≠cita do Garbage Collector detectada.**";
  }

  // ======================
  // üíæ Memory leaks (gen√©rico)
  // ‚ö†Ô∏è Executa s√≥ se n√£o for AllTheLeaks
  // ======================
  else if ((lower.includes("memory leak") || lower.includes("leaks detected")) && !lower.includes("alltheleaks")) {
    tipo = "memory";
    msg = "üíæ **Poss√≠vel vazamento de mem√≥ria detectado.**";
  }

  // ======================
  // ‚õî Watchdog (travamento)
  // ======================
  else if (lower.includes("watchdog")) {
    tipo = "watchdog";
    msg = "‚õî **Watchdog detectou travamento do servidor!**";
  }

  // ======================
  // üìä Spark profiler
  // ======================
  else if (lower.includes("spark profiler")) {
    tipo = "profiler";
    msg = "üìä **Spark registrou dados de performance.**";
  }

  else if (lower.includes("spark heapdump")) {
    tipo = "memory";
    msg = "üìä **Spark gerou um heapdump de mem√≥ria (an√°lise de consumo).**";
  }

  // ======================
  // üïí TickProfiler (Forge)
  // ======================
  else if (lower.includes("tickprofiler")) {
    tipo = "profiler";
    msg = "üïí **TickProfiler registrou an√°lise de performance (ticks por segundo).**";
  }

  // ======================
  // üêå Processos lentos gen√©ricos
  // ======================
  else if (lower.includes("ms behind") || lower.includes("took too long")) {
    tipo = "lag";
    msg = "üêå **Um processo demorou mais do que o esperado (lag).**";
  }

  // üîô Retorna s√≥ se a mensagem for nova ou estiver fora do cooldown
  if (!shouldSend(msg)) {
    return { tipo: "default", msg: null }; // ignora duplicado
  }

  return { tipo, msg };
}

module.exports = { translatePerformance };
